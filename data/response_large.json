<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "G587UXgea2kshi7zY79e";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140180082196656">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">145</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.engine = engine</pre>
<pre class="line before"><span class="ws">        </span>self.dialect = dialect = engine.dialect</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if connection is None:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>self._dbapi_connection = engine.raw_connection()</pre>
<pre class="line after"><span class="ws">            </span>except dialect.loaded_dbapi.Error as err:</pre>
<pre class="line after"><span class="ws">                </span>Connection._handle_dbapi_exception_noconnection(</pre>
<pre class="line after"><span class="ws">                    </span>err, dialect, engine</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">                </span>raise</pre></div>
</div>

<li><div class="frame" id="frame-140180082196768">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">3269</em>,
      in <code class="function">raw_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>.. seealso::</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:ref:`dbapi_connections`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.pool.connect()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class OptionEngineMixin(log.Identified):</pre>
<pre class="line after"><span class="ws">    </span>_sa_propagate_class_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082198560">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">452</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>The connection is instrumented such that when its</pre>
<pre class="line before"><span class="ws">        </span>``close()`` method is called, the connection will be returned to</pre>
<pre class="line before"><span class="ws">        </span>the pool.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return _ConnectionFairy._checkout(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _return_conn(self, record: ConnectionPoolEntry) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Given a _ConnectionRecord, return it to the :class:`_pool.Pool`.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>This method is called when an instrumented DBAPI connection</pre></div>
</div>

<li><div class="frame" id="frame-140180082196992">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">1255</em>,
      in <code class="function">_checkout</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>pool: Pool,</pre>
<pre class="line before"><span class="ws">        </span>threadconns: Optional[threading.local] = None,</pre>
<pre class="line before"><span class="ws">        </span>fairy: Optional[_ConnectionFairy] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; _ConnectionFairy:</pre>
<pre class="line before"><span class="ws">        </span>if not fairy:</pre>
<pre class="line current"><span class="ws">            </span>fairy = _ConnectionRecord.checkout(pool)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if threadconns is not None:</pre>
<pre class="line after"><span class="ws">                </span>threadconns.current = weakref.ref(fairy)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>assert (</pre></div>
</div>

<li><div class="frame" id="frame-140180082198336">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">716</em>,
      in <code class="function">checkout</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>@classmethod</pre>
<pre class="line before"><span class="ws">    </span>def checkout(cls, pool: Pool) -&gt; _ConnectionFairy:</pre>
<pre class="line before"><span class="ws">        </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">            </span>rec = cast(_ConnectionRecord, pool._do_get())</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>rec = pool._do_get()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>dbapi_connection = rec.get_connection()</pre>
<pre class="line after"><span class="ws">        </span>except BaseException as err:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre></div>
</div>

<li><div class="frame" id="frame-140180082197216">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py"</cite>,
      line <em class="line">169</em>,
      in <code class="function">_do_get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self._inc_overflow():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self._create_connection()</pre>
<pre class="line before"><span class="ws">            </span>except:</pre>
<pre class="line before"><span class="ws">                </span>with util.safe_reraise():</pre>
<pre class="line current"><span class="ws">                    </span>self._dec_overflow()</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>return self._do_get()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _inc_overflow(self) -&gt; bool:</pre></div>
</div>

<li><div class="frame" id="frame-140180082198112">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082197440">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py"</cite>,
      line <em class="line">166</em>,
      in <code class="function">_do_get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>code=&#34;3o7r&#34;,</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._inc_overflow():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self._create_connection()</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                    </span>self._dec_overflow()</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">        </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-140180082197888">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">393</em>,
      in <code class="function">_create_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _create_connection(self) -&gt; ConnectionPoolEntry:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return _ConnectionRecord(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _invalidate(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>connection: PoolProxiedConnection,</pre>
<pre class="line after"><span class="ws">        </span>exception: Optional[BaseException] = None,</pre></div>
</div>

<li><div class="frame" id="frame-140180082197664">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">678</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.starttime = 0</pre>
<pre class="line before"><span class="ws">        </span>self.dbapi_connection = None</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.__pool = pool</pre>
<pre class="line before"><span class="ws">        </span>if connect:</pre>
<pre class="line current"><span class="ws">            </span>self.__connect()</pre>
<pre class="line after"><span class="ws">        </span>self.finalize_callback = deque()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>dbapi_connection: Optional[DBAPIConnection]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@property</pre></div>
</div>

<li><div class="frame" id="frame-140180082196544">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">903</em>,
      in <code class="function">__connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dbapi_connection = connection = pool._invoke_creator(self)</pre>
<pre class="line before"><span class="ws">            </span>pool.logger.debug(&#34;Created new connection %r&#34;, connection)</pre>
<pre class="line before"><span class="ws">            </span>self.fresh = True</pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line before"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line current"><span class="ws">                </span>pool.logger.debug(&#34;Error on connect(): %s&#34;, e)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># in SQLAlchemy 1.4 the first_connect event is not used by</pre>
<pre class="line after"><span class="ws">            </span># the engine, so this will usually not be set</pre>
<pre class="line after"><span class="ws">            </span>if pool.dispatch.first_connect:</pre>
<pre class="line after"><span class="ws">                </span>pool.dispatch.first_connect.for_modify(</pre></div>
</div>

<li><div class="frame" id="frame-140180082319424">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082319536">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">898</em>,
      in <code class="function">__connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># ensure any existing connection is removed, so that if</pre>
<pre class="line before"><span class="ws">        </span># creator fails, this attribute stays None</pre>
<pre class="line before"><span class="ws">        </span>self.dbapi_connection = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self.starttime = time.time()</pre>
<pre class="line current"><span class="ws">            </span>self.dbapi_connection = connection = pool._invoke_creator(self)</pre>
<pre class="line after"><span class="ws">            </span>pool.logger.debug(&#34;Created new connection %r&#34;, connection)</pre>
<pre class="line after"><span class="ws">            </span>self.fresh = True</pre>
<pre class="line after"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>pool.logger.debug(&#34;Error on connect(): %s&#34;, e)</pre></div>
</div>

<li><div class="frame" id="frame-140180082319760">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py"</cite>,
      line <em class="line">640</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>DBAPIConnection,</pre>
<pre class="line before"><span class="ws">                        </span>fn(dialect, connection_record, cargs, cparams),</pre>
<pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">                    </span>if connection is not None:</pre>
<pre class="line before"><span class="ws">                        </span>return connection</pre>
<pre class="line current"><span class="ws">            </span>return dialect.connect(*cargs, **cparams)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>creator = pop_kwarg(&#34;creator&#34;, connect)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>poolclass = pop_kwarg(&#34;poolclass&#34;, None)</pre>
<pre class="line after"><span class="ws">        </span>if poolclass is None:</pre></div>
</div>

<li><div class="frame" id="frame-140180082319872">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">580</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>% (ident, self.max_identifier_length)</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def connect(self, *cargs, **cparams):</pre>
<pre class="line before"><span class="ws">        </span># inherits the docstring from interfaces.Dialect.connect</pre>
<pre class="line current"><span class="ws">        </span>return self.loaded_dbapi.connect(*cargs, **cparams)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def create_connect_args(self, url):</pre>
<pre class="line after"><span class="ws">        </span># inherits the docstring from interfaces.Dialect.create_connect_args</pre>
<pre class="line after"><span class="ws">        </span>opts = url.translate_connect_args()</pre>
<pre class="line after"><span class="ws">        </span>opts.update(url.query)</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-140180082226448">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2551</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140180082227680">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2531</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140180082226224">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-140180082227456">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2528</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140180082226000">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1825</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-140180082227232">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-140180082225776">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1823</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140180082227008">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140180082225552">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/decorator.py"</cite>,
      line <em class="line">128</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>options = get_cors_options(current_app, _options)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if options.get(&#39;automatic_options&#39;) and request.method == &#39;OPTIONS&#39;:</pre>
<pre class="line before"><span class="ws">                </span>resp = current_app.make_default_options_response()</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>resp = make_response(f(*args, **kwargs))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>set_cors_headers(resp, options)</pre>
<pre class="line after"><span class="ws">            </span>setattr(resp, FLASK_CORS_EVALUATED, True)</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082226784">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/Documents/georgia_tech/datacockpit-org/monitoring-tool/demo.py"</cite>,
      line <em class="line">219</em>,
      in <code class="function">get_all</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span># For the sake of the demo, we are combining the output of handcrafted data for quality</pre>
<pre class="line before"><span class="ws"></span># and DBDEO data for usage.</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/get_all&#39;)</pre>
<pre class="line before"><span class="ws"></span>@cross_origin()</pre>
<pre class="line before"><span class="ws"></span>def get_all():</pre>
<pre class="line current"><span class="ws">    </span>dcp_du = dcp_dataset_usage.query.all()</pre>
<pre class="line after"><span class="ws">    </span>att_mets = attribute_metrics.query.all()</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Number of responses: &#34;, len(dcp_du))</pre>
<pre class="line after"><span class="ws">    </span>result = {&#34;name&#34;: &#34;dcp_dataset_usage&#34;}</pre>
<pre class="line after"><span class="ws">    </span>rows = []</pre>
<pre class="line after"><span class="ws">    </span>for i in range(len(dcp_du)-1):</pre></div>
</div>

<li><div class="frame" id="frame-140180082225328">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2715</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(</pre>
<pre class="line after"><span class="ws">        </span>self: SelfQuery, statement: ExecutableReturnsRows</pre></div>
</div>

<li><div class="frame" id="frame-140180082226560">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2875</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082225440">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2229</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-140180082226336">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2114</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>False,</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>bind = self.get_bind(**bind_arguments)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>conn = self._connection_for_bind(bind)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if _scalar_result and not compile_state_cls:</pre>
<pre class="line after"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line after"><span class="ws">                </span>params = cast(_CoreSingleExecuteParams, params)</pre>
<pre class="line after"><span class="ws">            </span>return conn.scalar(</pre></div>
</div>

<li><div class="frame" id="frame-140180082225664">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1981</em>,
      in <code class="function">_connection_for_bind</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>TransactionalContext._trans_ctx_check(self)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line current"><span class="ws">        </span>return trans._connection_for_bind(engine, execution_options)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@overload</pre>
<pre class="line after"><span class="ws">    </span>def _execute_internal(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>statement: Executable,</pre></div>
</div>

<li><div class="frame" id="frame-140180082225888">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_connection_for_bind</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-140180082225216">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">137</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-140180082200464">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1108</em>,
      in <code class="function">_connection_for_bind</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>raise sa_exc.InvalidRequestError(</pre>
<pre class="line before"><span class="ws">                        </span>&#34;Session already has a Connection associated for the &#34;</pre>
<pre class="line before"><span class="ws">                        </span>&#34;given Connection&#39;s Engine&#34;</pre>
<pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>conn = bind.connect()</pre>
<pre class="line after"><span class="ws">                </span>local_connect = True</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>if execution_options:</pre>
<pre class="line after"><span class="ws">                </span>conn = conn.execution_options(**execution_options)</pre></div>
</div>

<li><div class="frame" id="frame-140180082199344">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">3245</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Engine.begin`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._connection_cls(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def raw_connection(self) -&gt; PoolProxiedConnection:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return a &#34;raw&#34; DBAPI connection from the connection pool.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>The returned object is a proxied version of the DBAPI</pre></div>
</div>

<li><div class="frame" id="frame-140180082199120">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if connection is None:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>self._dbapi_connection = engine.raw_connection()</pre>
<pre class="line before"><span class="ws">            </span>except dialect.loaded_dbapi.Error as err:</pre>
<pre class="line current"><span class="ws">                </span>Connection._handle_dbapi_exception_noconnection(</pre>
<pre class="line after"><span class="ws">                    </span>err, dialect, engine</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._dbapi_connection = connection</pre></div>
</div>

<li><div class="frame" id="frame-140180082198896">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2410</em>,
      in <code class="function">_handle_dbapi_exception_noconnection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if newraise:</pre>
<pre class="line before"><span class="ws">            </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">        </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">            </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">            </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">            </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _run_ddl_visitor(</pre></div>
</div>

<li><div class="frame" id="frame-140180082198672">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">145</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.engine = engine</pre>
<pre class="line before"><span class="ws">        </span>self.dialect = dialect = engine.dialect</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if connection is None:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>self._dbapi_connection = engine.raw_connection()</pre>
<pre class="line after"><span class="ws">            </span>except dialect.loaded_dbapi.Error as err:</pre>
<pre class="line after"><span class="ws">                </span>Connection._handle_dbapi_exception_noconnection(</pre>
<pre class="line after"><span class="ws">                    </span>err, dialect, engine</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">                </span>raise</pre></div>
</div>

<li><div class="frame" id="frame-140180082198448">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">3269</em>,
      in <code class="function">raw_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>.. seealso::</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:ref:`dbapi_connections`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.pool.connect()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class OptionEngineMixin(log.Identified):</pre>
<pre class="line after"><span class="ws">    </span>_sa_propagate_class_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082200240">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">452</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>The connection is instrumented such that when its</pre>
<pre class="line before"><span class="ws">        </span>``close()`` method is called, the connection will be returned to</pre>
<pre class="line before"><span class="ws">        </span>the pool.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return _ConnectionFairy._checkout(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _return_conn(self, record: ConnectionPoolEntry) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Given a _ConnectionRecord, return it to the :class:`_pool.Pool`.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>This method is called when an instrumented DBAPI connection</pre></div>
</div>

<li><div class="frame" id="frame-140180082198224">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">1255</em>,
      in <code class="function">_checkout</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>pool: Pool,</pre>
<pre class="line before"><span class="ws">        </span>threadconns: Optional[threading.local] = None,</pre>
<pre class="line before"><span class="ws">        </span>fairy: Optional[_ConnectionFairy] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; _ConnectionFairy:</pre>
<pre class="line before"><span class="ws">        </span>if not fairy:</pre>
<pre class="line current"><span class="ws">            </span>fairy = _ConnectionRecord.checkout(pool)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if threadconns is not None:</pre>
<pre class="line after"><span class="ws">                </span>threadconns.current = weakref.ref(fairy)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>assert (</pre></div>
</div>

<li><div class="frame" id="frame-140180082200352">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">716</em>,
      in <code class="function">checkout</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>@classmethod</pre>
<pre class="line before"><span class="ws">    </span>def checkout(cls, pool: Pool) -&gt; _ConnectionFairy:</pre>
<pre class="line before"><span class="ws">        </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">            </span>rec = cast(_ConnectionRecord, pool._do_get())</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>rec = pool._do_get()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>dbapi_connection = rec.get_connection()</pre>
<pre class="line after"><span class="ws">        </span>except BaseException as err:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre></div>
</div>

<li><div class="frame" id="frame-140180082198000">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py"</cite>,
      line <em class="line">169</em>,
      in <code class="function">_do_get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self._inc_overflow():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self._create_connection()</pre>
<pre class="line before"><span class="ws">            </span>except:</pre>
<pre class="line before"><span class="ws">                </span>with util.safe_reraise():</pre>
<pre class="line current"><span class="ws">                    </span>self._dec_overflow()</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>return self._do_get()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _inc_overflow(self) -&gt; bool:</pre></div>
</div>

<li><div class="frame" id="frame-140180082200128">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082197776">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py"</cite>,
      line <em class="line">166</em>,
      in <code class="function">_do_get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>code=&#34;3o7r&#34;,</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._inc_overflow():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self._create_connection()</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                    </span>self._dec_overflow()</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">        </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-140180082199904">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">393</em>,
      in <code class="function">_create_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _create_connection(self) -&gt; ConnectionPoolEntry:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return _ConnectionRecord(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _invalidate(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>connection: PoolProxiedConnection,</pre>
<pre class="line after"><span class="ws">        </span>exception: Optional[BaseException] = None,</pre></div>
</div>

<li><div class="frame" id="frame-140180082197552">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">678</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.starttime = 0</pre>
<pre class="line before"><span class="ws">        </span>self.dbapi_connection = None</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.__pool = pool</pre>
<pre class="line before"><span class="ws">        </span>if connect:</pre>
<pre class="line current"><span class="ws">            </span>self.__connect()</pre>
<pre class="line after"><span class="ws">        </span>self.finalize_callback = deque()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>dbapi_connection: Optional[DBAPIConnection]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@property</pre></div>
</div>

<li><div class="frame" id="frame-140180082199680">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">903</em>,
      in <code class="function">__connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dbapi_connection = connection = pool._invoke_creator(self)</pre>
<pre class="line before"><span class="ws">            </span>pool.logger.debug(&#34;Created new connection %r&#34;, connection)</pre>
<pre class="line before"><span class="ws">            </span>self.fresh = True</pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line before"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line current"><span class="ws">                </span>pool.logger.debug(&#34;Error on connect(): %s&#34;, e)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span># in SQLAlchemy 1.4 the first_connect event is not used by</pre>
<pre class="line after"><span class="ws">            </span># the engine, so this will usually not be set</pre>
<pre class="line after"><span class="ws">            </span>if pool.dispatch.first_connect:</pre>
<pre class="line after"><span class="ws">                </span>pool.dispatch.first_connect.for_modify(</pre></div>
</div>

<li><div class="frame" id="frame-140180082197328">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140180082199456">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py"</cite>,
      line <em class="line">898</em>,
      in <code class="function">__connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># ensure any existing connection is removed, so that if</pre>
<pre class="line before"><span class="ws">        </span># creator fails, this attribute stays None</pre>
<pre class="line before"><span class="ws">        </span>self.dbapi_connection = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self.starttime = time.time()</pre>
<pre class="line current"><span class="ws">            </span>self.dbapi_connection = connection = pool._invoke_creator(self)</pre>
<pre class="line after"><span class="ws">            </span>pool.logger.debug(&#34;Created new connection %r&#34;, connection)</pre>
<pre class="line after"><span class="ws">            </span>self.fresh = True</pre>
<pre class="line after"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line after"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>pool.logger.debug(&#34;Error on connect(): %s&#34;, e)</pre></div>
</div>

<li><div class="frame" id="frame-140180082199232">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py"</cite>,
      line <em class="line">640</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>DBAPIConnection,</pre>
<pre class="line before"><span class="ws">                        </span>fn(dialect, connection_record, cargs, cparams),</pre>
<pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">                    </span>if connection is not None:</pre>
<pre class="line before"><span class="ws">                        </span>return connection</pre>
<pre class="line current"><span class="ws">            </span>return dialect.connect(*cargs, **cparams)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>creator = pop_kwarg(&#34;creator&#34;, connect)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>poolclass = pop_kwarg(&#34;poolclass&#34;, None)</pre>
<pre class="line after"><span class="ws">        </span>if poolclass is None:</pre></div>
</div>

<li><div class="frame" id="frame-140180082196880">
  <h4>File <cite class="filename">"/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">580</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>% (ident, self.max_identifier_length)</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def connect(self, *cargs, **cparams):</pre>
<pre class="line before"><span class="ws">        </span># inherits the docstring from interfaces.Dialect.connect</pre>
<pre class="line current"><span class="ws">        </span>return self.loaded_dbapi.connect(*cargs, **cparams)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def create_connect_args(self, url):</pre>
<pre class="line after"><span class="ws">        </span># inherits the docstring from interfaces.Dialect.create_connect_args</pre>
<pre class="line after"><span class="ws">        </span>opts = url.translate_connect_args()</pre>
<pre class="line after"><span class="ws">        </span>opts.update(url.query)</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 3269, in raw_connection
    return self.pool.connect()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 452, in connect
    return _ConnectionFairy._checkout(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 1255, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 716, in checkout
    rec = pool._do_get()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py&#34;, line 169, in _do_get
    self._dec_overflow()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py&#34;, line 166, in _do_get
    return self._create_connection()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 393, in _create_connection
    return _ConnectionRecord(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 678, in __init__
    self.__connect()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 903, in __connect
    pool.logger.debug(&#34;Error on connect(): %s&#34;, e)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 898, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py&#34;, line 640, in connect
    return dialect.connect(*cargs, **cparams)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py&#34;, line 580, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
sqlite3.OperationalError: unable to open database file

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 2551, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 2531, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py&#34;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 2528, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 1825, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py&#34;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 1823, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py&#34;, line 1799, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/decorator.py&#34;, line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File &#34;/Users/suryashekharchakraborty/Documents/georgia_tech/datacockpit-org/monitoring-tool/demo.py&#34;, line 219, in get_all
    dcp_du = dcp_dataset_usage.query.all()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py&#34;, line 2715, in all
    return self._iter().all()  # type: ignore
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py&#34;, line 2875, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py&#34;, line 2229, in execute
    return self._execute_internal(
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py&#34;, line 2114, in _execute_internal
    conn = self._connection_for_bind(bind)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py&#34;, line 1981, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File &#34;&lt;string&gt;&#34;, line 2, in _connection_for_bind
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py&#34;, line 1108, in _connection_for_bind
    conn = bind.connect()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 3245, in connect
    return self._connection_cls(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 147, in __init__
    Connection._handle_dbapi_exception_noconnection(
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 2410, in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py&#34;, line 3269, in raw_connection
    return self.pool.connect()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 452, in connect
    return _ConnectionFairy._checkout(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 1255, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 716, in checkout
    rec = pool._do_get()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py&#34;, line 169, in _do_get
    self._dec_overflow()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py&#34;, line 166, in _do_get
    return self._create_connection()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 393, in _create_connection
    return _ConnectionRecord(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 678, in __init__
    self.__connect()
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 903, in __connect
    pool.logger.debug(&#34;Error on connect(): %s&#34;, e)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py&#34;, line 898, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py&#34;, line 640, in connect
    return dialect.connect(*cargs, **cparams)
  File &#34;/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py&#34;, line 580, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 3269, in raw_connection
    return self.pool.connect()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 452, in connect
    return _ConnectionFairy._checkout(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 1255, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 716, in checkout
    rec = pool._do_get()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py", line 169, in _do_get
    self._dec_overflow()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py", line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py", line 166, in _do_get
    return self._create_connection()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 393, in _create_connection
    return _ConnectionRecord(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 678, in __init__
    self.__connect()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 903, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py", line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 898, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py", line 640, in connect
    return dialect.connect(*cargs, **cparams)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py", line 580, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
sqlite3.OperationalError: unable to open database file

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 2551, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 2531, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 2528, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 1825, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 1823, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask/app.py", line 1799, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/flask_cors/decorator.py", line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File "/Users/suryashekharchakraborty/Documents/georgia_tech/datacockpit-org/monitoring-tool/demo.py", line 219, in get_all
    dcp_du = dcp_dataset_usage.query.all()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py", line 2715, in all
    return self._iter().all()  # type: ignore
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py", line 2875, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py", line 2229, in execute
    return self._execute_internal(
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py", line 2114, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py", line 1981, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/state_changes.py", line 137, in _go
    ret_value = fn(self, *arg, **kw)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py", line 1108, in _connection_for_bind
    conn = bind.connect()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 3245, in connect
    return self._connection_cls(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 147, in __init__
    Connection._handle_dbapi_exception_noconnection(
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 2410, in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py", line 3269, in raw_connection
    return self.pool.connect()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 452, in connect
    return _ConnectionFairy._checkout(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 1255, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 716, in checkout
    rec = pool._do_get()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py", line 169, in _do_get
    self._dec_overflow()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py", line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py", line 166, in _do_get
    return self._create_connection()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 393, in _create_connection
    return _ConnectionRecord(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 678, in __init__
    self.__connect()
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 903, in __connect
    pool.logger.debug("Error on connect(): %s", e)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py", line 147, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py", line 898, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py", line 640, in connect
    return dialect.connect(*cargs, **cparams)
  File "/Users/suryashekharchakraborty/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py", line 580, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->
